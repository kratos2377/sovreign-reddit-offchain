version: '3.8'

services:
  # RabbitMQ for AMQP messaging
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # Redis instance for API responses
  redis-ws:
    image: redis:7-alpine
    container_name: redis-ws
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_ws_data:/data
    networks:
      - app-network

  # Redis instance for WebSocket transaction HAs
  redis-api:
    image: redis:7-alpine
    container_name: redis-api
    ports:
      - "6380:6380"
    command: ["redis-server", "--bind", "redis-api", "--port", "6380", "--requirepass" , "eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81"]
    volumes:
      - redis_api_data:/data

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: reddit-db-layer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./scripts/create-databases.sh:/docker-entrypoint-initdb.d/create-databases.sh:ro
    mem_limit: 1024m

  # Zookeeper for Kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    mem_limit: 128m


  broker:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: '-Xmx384m -Xms128m'
      KAFKA_JVM_PERFORMANCE_OPTS: '-client -XX:+UseG1GC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true'
    mem_limit: 768m

  # Kafka topic initialization
  # kafka-topics:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: kafka-topics
  #   depends_on:
  #     - kafka
  #   command: >
  #     bash -c "
  #       # Wait for Kafka to be ready
  #       echo 'Waiting for Kafka to be ready...'
  #       cub kafka-ready -b localhost:9092 1 30
        
  #       # Create topics
  #       kafka-topics --create --topic user --bootstrap-server localhost:9092 --partitions 2 --replication-factor 1 --if-not-exists
  #       kafka-topics --create --topic post --bootstrap-server localhost:9092 --partitions 2 --replication-factor 1 --if-not-exists
  #       kafka-topics --create --topic subreddit --bootstrap-server localhost:9092 --partitions 2 --replication-factor 1 --if-not-exists
        
  #       echo 'Topics created successfully!'
  #       kafka-topics --list --bootstrap-server localhost:9092
  #     "
  #   networks:
  #     - app-network

volumes:
  rabbitmq_data:
  redis_api_data:
  redis_ws_data:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:

networks:
  app-network:
    driver: bridge